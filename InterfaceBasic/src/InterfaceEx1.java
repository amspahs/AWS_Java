
public class InterfaceEx1 {
}
/*
	인터페이스(Interface)란?
			
	인터페이스는 일종의 추상 클래스이다.	//그래서 추상 클래스를 배워야 했는데 웹에서 사용 안해서 건너뛰고 이거 먼저 배운다. 나중에 개념 독학하셈.
	추상 클래스처럼 추상 메서드를 갖지만, 추상 클래스보다 추상화 정도가 높아서		
	추상 클래스와 달리 몸통을 갖춘 일반 메서드 또는 멤버 변수를 구성원으로 가질 수 없다.
						//추상화(개념적) vs 일반화(구체적)
						//동물에 대해 설명해보셈. 되게 많지? 뭔가 뭉뚱그리고 싶을수록 추상성이 높다. 구체적인 정의가 추가될 수록 추상성이 낮아진다.
	
	오직 추상 메서드와 상수만을 멤버로 가질 수 있으며, 그 외의 다른 어떠한 요소도 허용하지 않는다.
	
	추상 클래스를 부분적으로만 완성된 '미완성된 설계도'라고 한다면
	인터페이스는 구현된 것은 아무 것도 없고, 밑그림만 그려져 있는 '기본 설계도'라고 할 수 있다.	//회의록 구체적으로 적는 것과 비슷한 느낌일 듯.

	인터페이스는 그 자체만으로 사용되기보다는 다른 클래스를 작성하는데 도움 줄 목적으로 작성된다.
	
	-인터페이스 작성법
	interface 인터페이스 이름{
		public static final 타입 상수이름 = 값;
		public abstract 메서드 이름(매개변수 목록);
	}
	
	-모든 멤버 변수는 public static final이어야 하며, 이를 생략할 수 있다.
	-모든 메서드는 public abstract이어야 하며, 이를 생략할 수 있다.
	-클래스와 달리 다중 상속이 가능하다.
	
	인스턴스는 그 자체로 생성할 수 없다.	//뉴가 존재할 수 없어.
	구현을 위해서는 implements를 사용해야 한다.
	
	class 클래스 이름 implements 인터페이스 이름 {
		//	인터페이스에 정의된 추상 메서드를 구현한다.
	
	인터페이스는 상속 대신 구현이라는 용어를 사용한다.
	
	인터페이스의 장점
	-개발 시간을 단축시킬 수 있다.
	-표준화가 가능하다.
	-서로 관계없는 클래스들에게 관계를 맺어줄 수 있다.
	-독립적인 프로그래밍이 가능하다.
*/