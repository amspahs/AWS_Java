package one;

public class ObjectEx1 {
	public static void main(String[] args) {
		
//		객체지향언어
//		1. 코드의 재사용성이 높다
//		새로운 코드를 작성할 때 기존의 코드를 이용하여 쉽게 작성할 수 있다
//		2. 코드의 관리가 용이하다
//		코드 간의 관계를 이용하여 적은 노력으로 쉽게 코드를 변경할 수 있다
//		3. 신뢰성이 높은 프로그래밍을 가능하게 한다
//		제어자와 메서드를 이용하여 데이터를 보호하고 올바른 값을 유지하도록 하며,
//		코드의 중복을 제거하여 코드의 불일치로 인한 오동작을 방지할 수 있다
//		
//		: 코드의 재사용성이 높고 유지보수가 용이하다
//		
//		주의사항: 너무 객체지향에 얽매여 고민하기 보다는 일단 프로그램을 기능적으로 완성한 다음
//		어떻게 하면 보다 객체지향적으로 코드를 개선할 수 있을지를  고민하여 점차 개선해 나가는 것이 좋다
		
		
//		클래스(Class)와 객체(Object)
//		
//		-클래스의 정의 - 클래스란?
//		객체를 정의해놓은 것
//		
//		-클래스의 용도 - 
//		클래스는 객체를 생성하는데 사용
		
//		-객체의 사전적인 의미: 실제로 존재하는 것
//		
//		-객체의 정의
//		실재하는 것. 사물 또는 개념
//		
//		-객체의 용도
//		객체가 가지고 있는 기능과 속성에 따라 다름
//		
//		-개념이나 논리와 같은 무형적인 것들도 객체로 간주
		
//		-유형의 객체
//		책상, 의자, 자동차, TV와 같은 사물
//		
//		-무형의 객체
//		수학공식, 프로그램 에러와 같은 논리나 개념
		
//		-클래스는 객체의 설계도 또는 틀이라고 정의할 수 있다.
		
//		objectEx1	ctrl + shift + r: 파일 찾기에 주로 씀
		
//		클래스			객체
//		제품 설계도			제품
//		Tv 설계도			Tv
//		붕어빵 틀			붕어빵
		
		
//		객체는 참조변수를 통해서만 다룰 수 있으며, 참조변수의 타입은 인스턴스의 타입과 일치해야 한다.
//		쩜을 통해서만 작동됨. new Tv()는 티비, tv라는 변수는 리모컨. 		
		
		
//		!클래스의 또다른 정의
		
//		클래스: 데이터와 함수의 결합
//		변수 -> 배열 -> 구조체 -> 클래스
//		
//		변수: 하나의 데이터를 저장할 수 있는 공간
//		
//		배열: 같은 종류의 여러 데이터를 하나의 집합으로 저장할 수 있는 공간
//		
//		구조체: 서로 관련된 여러 데이터를 종류에 관계없이 하나의 집합으로 저장할 수 있는 공간
//		
//		클래스: 데이터와 함수의 결합(구조체 + 함수)
//		
//		데이터 처리를 위한 데이터 저장형태
//		
//		클래스 : 사용자정의 타입(user-defined type)
		
		
		
	}
}
